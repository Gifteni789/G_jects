from search import keyword_to_titles, title_to_info, search, article_length,key_by_author, filter_to_author, filter_out, articles_from_year
from search_tests_helper import get_print, print_basic, print_advanced, print_advanced_option
from wiki import article_metadata
from unittest.mock import patch
from unittest import TestCase, main

class TestSearch(TestCase):

    ##############
    # UNIT TESTS #
    ##############

    def test_example_unit_test(self):
        dummy_keyword_dict = {
            'cat': ['title1', 'title2', 'title3'],
            'dog': ['title3', 'title4']
        }
        expected_search_results = ['title3', 'title4']
        self.assertEqual(search('dog', dummy_keyword_dict), expected_search_results)

    def test_keyword_to_titles(self):
        metadata = [
            ['Black dog (ghost)','Pegship', 1234567890 , 2491, ['bark','bone','toys' ]],
            ['Mexican dog-faced bat','Mack Johnson', 1234567880 , 491,['bark','bone','hair']]
        ]
        expected_search_results = {
            'bark' : ['Black dog (ghost)','Mexican dog-faced bat'],
            'bone' : ['Black dog (ghost)','Mexican dog-faced bat'],
            'toys' : ['Black dog (ghost)'],
            'hair' : ['Mexican dog-faced bat']
        }
        self.assertEqual(keyword_to_titles(metadata), expected_search_results)

    def test_title_to_info(self):
        metadata = [
            ['Black dog (ghost)','Pegship', 1234567890 , 2491, ['bark','bone','toys' ]],
            ['Mexican dog-faced bat','Mack Johnson', 1234567880 , 491,['bark','bone','hair']]
        ]
         
        expected_search_results = {
            'Black dog (ghost)': {'author':'Pegship', 'timestamp':1234567890 , 'length': 2491},
            'Mexican dog-faced bat': {'author': 'Mack Johnson', 'timestamp':1234567880 , 'length': 491}
        }
        self.assertEqual(title_to_info(metadata), expected_search_results)


    def test_search(self):
        keyword_to_titles = {
            'Bleach': ['Ichigo', 'Uryu', 'anime'],
            'Jujutsu Kaisen': ['Yuji', 'Megumi', 'anime']
        }
        expected_search_results = ['Ichigo', 'Uryu', 'anime']
        self.assertEqual(search('Bleach', keyword_to_titles), expected_search_results)

        keyword_to_titles = {
            'Bleach': ['Ichigo', 'Uryu', 'anime'],
            'Jujutsu Kaisen': ['Yuji', 'Megumi','anime']
        }
        expected_search_results = []
        self.assertEqual(search('bankai', keyword_to_titles), expected_search_results)

    def test_article_length(self):
        max_length = 500
        article_titles = ['Black dog (ghost)', 'Mexican dog-faced bat', 'Dalmatian (dog)', 'Guide dog', 'Sun dog']
        title_to_info = {
            'Black dog (ghost)': {'author': 'some author', 'timestamp':1234567890 , 'length': 2491},
            'Mexican dog-faced bat': {'author': 'an author', 'timestamp':1234567880 , 'length': 491},
            'Dalmatian (dog)': {'author': 'no author', 'timestamp':1234567870 , 'length': 1491},
            'Guide dog': {'author': 'an author', 'timestamp':1234567880 , 'length': 419},
            'Sun dog': {'author': 'an author', 'timestamp':1234567880 , 'length': 3491}
        }
        expected_search_results = ['Mexican dog-faced bat', 'Guide dog']
        self.assertEqual(article_length(max_length, article_titles, title_to_info), expected_search_results)

    def test_key_by_author(self):
        article_titles = ['Black dog (ghost)', 'Mexican dog-faced bat', 'Dalmatian (dog)', 'Guide dog', 'Sun dog']
        title_to_info = {
            'Black dog (ghost)': {'author':'Pegship', 'timestamp':732031200 , 'length': 2491},
            'Mexican dog-faced bat': {'author': 'Mack Johnson', 'timestamp':1050328800 , 'length': 491},
            'Dalmatian (dog)': {'author': 'Mr Jake', 'timestamp':1055772000 , 'length': 1491},
            'Guide dog': {'author':'Jack Johnson', 'timestamp':1087567200 , 'length': 419},
            'Sun dog': {'author':'Mr Jake', 'timestamp':1592488800 , 'length': 3491}
        }
        expected_search_results = {'Pegship': ['Black dog (ghost)'], 'Mack Johnson': ['Mexican dog-faced bat'], 'Mr Jake': ['Dalmatian (dog)', 'Sun dog'], 'Jack Johnson': ['Guide dog']}
        self.assertEqual(key_by_author(article_titles, title_to_info), expected_search_results)
    
    def articles_from_year_test(self):
        article_titles = ['Black dog (ghost)', 'Mexican dog-faced bat', 'Dalmatian (dog)', 'Guide dog', 'Sun dog']
        title_to_info = {
            'Black dog (ghost)': {'author':'Pegship', 'timestamp':732031200 , 'length': 2491},
            'Mexican dog-faced bat': {'author': 'Mack Johnson', 'timestamp':1050328800 , 'length': 491},
            'Dalmatian (dog)': {'author': 'Mr Jake', 'timestamp':1055772000 , 'length': 1491},
            'Guide dog': {'author':'Jack Johnson', 'timestamp':1087567200 , 'length': 419},
            'Sun dog': {'author':'Mr Jake', 'timestamp':1592488800 , 'length': 3491}
        }
        expected_search_results = ['Mexican dog-faced bat', 'Dalmatian (dog)']
        self.assertEqual(articles_from_year(2003, article_titles, title_to_info), expected_search_results)
        self.assertEqual(articles_from_year(2004, article_titles, title_to_info),['Guide dog'])
        self.assertEqual(articles_from_year(2005, article_titles, title_to_info),['Sun dog'])

    #####################
    # INTEGRATION TESTS #
    #####################

    @patch('builtins.input')
    def test_example_integration_test(self, input_mock):
        keyword = 'soccer'
        advanced_option = 5
        advanced_response = 2009

        output = get_print(input_mock, [keyword, advanced_option, advanced_response])
        expected = print_basic() + keyword + '\n' + print_advanced() + str(advanced_option) + '\n' + print_advanced_option(advanced_option) + str(advanced_response) + "\n\nHere are your articles: ['Spain national beach soccer team', 'Steven Cohen (soccer)']\n"

        self.assertEqual(output, expected)

    @patch('builtins.input')
    def test_advancedsearch1_integration_test(self, input_mock):
        keyword = 'also'
        advanced_option = 1
        advanced_response = 3000

        output = get_print(input_mock, [keyword, advanced_option, advanced_response])
        expected = print_basic() + keyword + '\n' + print_advanced() + str(advanced_option) + '\n' + print_advanced_option(advanced_option) + str(advanced_response) + "\n\nHere are your articles: ['Lua (programming language)', 'Mode (computer interface)']\n"

        self.assertEqual(output, expected)

    @patch('builtins.input')
    def test_advancedsearch2_integration_test(self, input_mock):
        keyword = 'dog'
        advanced_option = 2
        advanced_response = {}

        output = get_print(input_mock, [keyword, advanced_option])
        expected = print_basic() + keyword + '\n' + print_advanced() + str(advanced_option) + '\n' + print_advanced_option(advanced_option) + "\nHere are your articles: {'Pegship': ['Black dog (ghost)'], 'Mack Johnson': ['Mexican dog-faced bat'], 'Mr Jake': ['Dalmatian (dog)', 'Sun dog'], 'Jack Johnson': ['Guide dog']}\n"

        self.assertEqual(output, expected)

    @patch('builtins.input')
    def test_advancedsearch3_integration_test(self, input_mock):
        keyword = 'music'
        advanced_option = 3
        advanced_response = "Jack Johnson"

        output = get_print(input_mock, [keyword, advanced_option, advanced_response])
        expected = print_basic() + keyword + '\n' + print_advanced() + str(advanced_option) + '\n' + print_advanced_option(advanced_option) + str(advanced_response) + "\n\nHere are your articles: ['List of Canadian musicians', 'Traditional Thai musical instruments', '2006 in music']\n"

        self.assertEqual(output, expected)

    @patch('builtins.input')
    def test_advancedsearch3_integration_test(self, input_mock):
        keyword = 'music'
        advanced_option = 4
        advanced_response = "country"

        output = get_print(input_mock, [keyword, advanced_option, advanced_response])
        expected = print_basic() + keyword + '\n' + print_advanced() + str(advanced_option) + '\n' + print_advanced_option(advanced_option) + str(advanced_response) + "\n\nHere are your articles: ['French pop music', 'Noise (music)', '1922 in music', '1986 in music', 'Kevin Cadogan', '2009 in music', 'Lights (musician)', 'Tim Arnold (musician)', 'Arabic music', 'Joe Becker (musician)', 'Richard Wright (musician)', 'Voice classification in non-classical music', 'List of dystopian music, TV programs, and games', 'Steve Perry (musician)', 'David Gray (musician)', 'Alex Turner (musician)', 'List of gospel musicians', 'Indian classical music', 'Traditional Thai musical instruments', 'Tony Kaye (musician)', 'Texture (music)']\n"

        self.assertEqual(output, expected)
        

# Write tests above this line. Do not remove.
if __name__ == "__main__":
    main()
